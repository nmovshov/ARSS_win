; This is the configuration file for program SGP. It's fairly robust but don't
; push it too hard. Adding new keys and sections in any order is fine.
; Try to avoid spurious white spaces in keys and values. The weakest point
; is where numerical values are read as strings, and converted using atof().
; This makes it hard to verify input, as invalid arguments produce implementation
; dependent results.
;
; You may use mid-line ; as a comment start for numeric properties but not for
; string properties.
;
; Common parameters like output frequency etc. in the [program] group.
;
; Simulation options like time step etc. in the [simulation] group.
;
; Material parameters in the [materials] group.
;
; PhysX parameters (including scene and actor flags) in the [PhysX] group.
;
; The [units] group is where you specify physical constants in code units. Note
; that other parameters, such as grain size and density, will play a role in
; determining the forces and and accelerations in a given simulation. Ideally, the
; numerical values of dynamical variables should be in the range of MKS values of
; "human experience" dynamics. This is not a hard requirment though. When you
; specify code units in this group they don't end up influencing the simulation.
; Rather, they are potentially passed to other helper functions or scripts to 
; help interpret the results of the simulation. See also the [scaling] group.
;
; The [scaling] group helps PhysX normalize and set tolerances. Not to be
; confused with physical scaling (a.k.a code units) set in the [units] group.
; Yes these two groups are somewhat overalpping, and perhaps either would be
; redundant if I totally trusted the other. At the moment they serve a similar
; purpose in a different way. If the PhysX tollerances are set to their defaults,
; and the time step is something like 1/60, then use the [units] group to help
; reinterpret the default values as code units. Alternatively, use MKS units in
; the code and let PhysX know by using the [scaling] group. The dynamics should
; be handled well enough but accuracy must surely suffer. Most obvious is the
; loss of accuracy in OpenGl rendering of huge, far away objects!
;
; UI and visualization parameters in the [glut] group.
;
; Parameters of the actual setup of interest in the [experiment] group.

[program]
physics_frequency = 60; max FPS*2, default 0 (no max)
;render_frequency  = 0; render every n sec, default 0 (always render)
;output_frequency  = 1; output every n frames, default 0 (no ouput)
;capture_frequency = 0; screencap every n frames, default 0 (no capture)
;auto_exit = true
;scene_file = new
scene_file = test.repx

[experiment]
; Available experiment types [make_sgp|load_sgp|orbit_sgp|test_scaling] plus solution utils
experiment_type = orbit_sgp

[experiment:make_sgp]
ellipsoid_long_axis  = 13.74
ellipsoid_ab_ratio   = 2
ellipsoid_ac_ratio   = 2
gsd_type             = uniform
gsd_size_scale       = 1
grain_density        = 920
grain_shape          = convex

[experiment:orbit_sgp]
orbit_type    = elliptical
big_M         = 1e6; mass of primary (cu)
pericenter    = 1; orbit pericenter (cu)
eccentricity  = 0; orbit eccentricity for elliptical orbit
v_inf         = 1; v_inf for hyperbolic orbit
pregen_orbit  = false
roche_factor   = 4; multiple of Roche radii to integrate from/to

[diagnostics]
color_code = surface
surface_thickness = 1

[experiment:test_scaling]
;nballs  = 2
;radius  = 1
;d_ini   = 8
;density = 1000

[units]
cu_length = 1e2;  code unit of length in meters (default 1)
cu_mass   = 1e6; code unit of mass in kg (default 1)
cu_time   = 1e3;  code unit of time in seconds (default 1)
cu_big_g  = 6.674e-5; gravity constant

[simulation]
time_step   = 0.02 ; code units, default 0 (so you must specify it!)
;target_time = 0    ; code units, default 0 (run forever)

[glut]
;z_buffer_far = 10; code units, default 10

[PhysX]
; -1 to use PhysX defaults
;sleep_threshold  = -1; specify v for 0.5v^2 or scale using speed
;bounce_threshold = -1; specify v or scale using speed
;linear_damping   = -1; default is 0
;angular_damping  = -1; default is 0.05!

[scaling]
; -1 tp use PhysX defaults (MKS for human-size things)
;length = -1; default is 1
;mass   = -1; default is 1000
speed  = 1; default is 10

[materials]
;default_friction_dyn = 0.5; default 0.5
;default_friction_sta = 0.5; default 0.5
;default_restitution  = 0.5; default 0.8
